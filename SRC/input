define ind1 as IND1;
define ind2 as IND2;
define ind3 as IND3;
define ind4 as IND4;
define ind5 as IND5;
define s1 as S1;
define s2 as S2;
define s3 as S3;
define s4 as S4;
define dout as DOUT;
define t1 as T1;
define t2 as T2;
define t3 as T3;
define t4 as T4;
define isStand as CTRL_STATE;
define checkSum as EE_SUM;
define led0 as LED0;
define led1 as LED1;
define led2 as LED2;
define led3 as LED3;
define video as VIDEO_MODE;
define long_up as LONG_BTN_UP;
define long_down as LONG_BTN_DOWN;
define enter as BTN_ENTR_STATUS;
define up as BTN_UP;
define down as BTN_DOWN;
define upStatus as BTN_UP_STATUS;
define downStatus as BTN_DOWN_STATUS;
define t1Last as T1_LAST;
define t2Last as T2_LAST;
define timerSec as TIMER_SEC;
define timerMSec as TIMER_MSEC;
define voltage as PWM_PERCENT;
define compar as I5;
init global maxDes;
init global oldt1;
init global adminTimer;
init global oldt2;
init global standTimer;
init global minDes;

init global timer;
init global oldVol;

label 0;
s1 = 0; ind2 = 1; ind3 = 0;
timerMSec = 62500;
standTimer = 750;
adminTimer = 750;
timer = 30000;
maxDes = 26; minDes = 20;
oldVol = 10;
init x = t3 + voltage + checkSum == 243;
x = x ? 4 : 2;
goto x;
delete x;

label 1;
init x; delete x;
goto 1;

label 2;
t3 = 22; voltage = 10;
define z as TMP24;
z = 4;
erase z;
goto 3;

label 3;
define next_state as TMP24;
init x = 243 - (t3 + voltage);
checkSum = x;
x = next_state;
erase next_state;
goto x;
delete x;

label 4;
oldt1 = t1; oldt2 = t2;
s1 = 0; s2 = 0; s3 = 0; s4 = 0;
ind1 = 0; ind3 = 0; ind4 = 0; ind5 = 0;
led0 = 0; led1 = 0; led2 = 0; led3 = 0;
video = 0; voltage = 0;
define y as TMP24;
y = 4;
erase y;
init x = standTimer == 0;
timer = 30000;
x = x ? 5 : 9;
if (standTimer == 0) { standTimer = 750; }
if (x == 5) { s1 = 1; ind3 = 1; }
goto x;
delete x;

label 5;
define des as TMP25;
init l0 = 0;
init output;
init error1 = (video == 1) && ((t1Last > 60) || (t1 < 0 - 40) || (t1 > 50));
init error2 = (video == 0) && ((t2Last > 60) || (t2 < 0-40) || (t2 > 50));
if ((video == 0) && !error2) { l0 = 0; output = t2; }
if ((video == 1) && !error1) { l0 = 118; output = t1; }
if (video == 2) { l0 = 236; output = t3; }
if (video == 3) { l0 = 236; output = des; }
if (video == 4) { l0 = 0; output = oldVol; }
led0 = l0;
delete l0;
print(output, TMP21);

init error = error1 || error2;
define x1 as TMP21;
define x2 as TMP22;
define x3 as TMP23;
if (error) { x1 = 158; x2 = 10; x3 = 10; }
delete error1; delete error2; delete error;
led1 = x1; led2 = x2; led3 = x3;
erase x1; erase x2; erase x3;

erase des;
delete output;
define after as TMP24;
after = 6;
erase after;
goto 9;

label 6;
init outside;
init inside;
init tmp1 = (t1 - oldt1 > 5) || (oldt1 - t1 > 5);
if (tmp1) { outside = oldt1; }
if (!tmp1) { outside = t1; oldt1 = t1; }
tmp1 = (t2 - oldt2 > 5) || (oldt2 - t2 > 5);
if (tmp1) { inside = oldt2; }
if (!tmp1) { inside = t2; oldt2 = t2; }
delete tmp1;
if ((t1Last > 60) || (outside < 0 - 40) || (outside > 50)) { outside = 24; }
if ((t2Last > 60) || (inside < 0-40) || (inside > 50)) { inside = 24; }

init desired = t3;
init rele2 = s2;
init rele3 = s3;
init rele4 = s4;

init out = outside >= 5;

init tmp1 = inside < desired;
init cond = tmp1 && out;
if (cond && (rele3 == 0)) { rele2 = 1; rele3 = 1; }
if (!cond && (rele3 == 1)) { rele2 = 0; rele3 = 0; }
delete cond;

init tmp2 = !out && tmp1;
if (tmp2) { rele4 = 1; }
if (!tmp2) { rele4 = 0; }
delete tmp2;
delete tmp1;

init tmp1 = inside > desired;
init cond = tmp1 && out;
if (cond && (rele2 == 0)) { rele2 = 1; }
if (!cond && (rele2 == 1) && (rele3 == 0)) { rele2 = 0; }
delete cond;
delete tmp1;

delete out;

if (rele2 == 0) { timer = 30000; }
init tmp = (timer > 0) && (rele2 == 1);
if (tmp) { rele2 = 0; }
if (tmp && (rele3 == 1)) { rele3 = 0; }
delete tmp;

ind5 = rele3 ? 1 : 0;
ind1 = rele4 ? 1 : 0;
init left = (!rele3) && (rele2);
if (left) { ind4 = 1; }
if (!left) { ind4 = 0; }
delete left;

s2 = rele2; s3 = rele3; s4 = rele4;
delete rele2; delete rele3; delete rele4;
delete inside;
delete desired;

goto 7;

label 7;
define des as TMP25;
if (!(video == 3)) { des = t3; }
init x = !enter;
init d = down;
init u = up;
init v = video;
init v0 = video == 0;
init v1 = video == 1;
init v2 = video == 2;
init v3 = video == 3;
init v4 = video == 4;
if (upStatus && downStatus) { u = 0; d = 0; }
init y = v0 && x;
if (y && d) { v = 2; }
if (y && u) { v = 1; }
y = v1 && x;
if (y && u) { v = 2; }
if (y && d) { v = 0; }
y = v2 && x;
if (y && u) { v = 0; }
if (y && d) { v = 1; } 

x = !x;
if (v2 && x) { v = 3; }
if (v0 && x) { v = 4; }
y = v3 && x;
init curDes = des;
if ((y && u) && (curDes < maxDes)) { curDes = curDes + 1; }
if ((y && d) && (curDes > minDes)) { curDes = curDes - 1; }
if (!x && v3) { v = 2; }
des = curDes;
delete curDes;

y = v4 && x;
init vol = oldVol;
if (y && u && (vol < 10)) { vol = vol + 1; }
if (y && d && (vol > 5)) { vol = vol - 1; }
oldVol = vol;
delete vol;
if (v4 && !x) { v = 0; }

erase des;
delete x; delete y; delete u; delete d;
delete v0; delete v1; delete v2; delete v3; delete v4;
video = v; delete v;
init wasIn = 0;
init ready = adminTimer == 0;
if (ready && (minDes == 20)) { wasIn = 1; minDes = 10; maxDes = 30; }
if (ready && (minDes == 10) && !wasIn) { minDes = 20; maxDes = 26; }
if (ready) { adminTimer = 750; }
delete wasIn;
init next = 8;
if (standTimer == 0)
{
	standTimer = 750;
	next = 4;
}
goto next;
delete next;

label 8;
define des as TMP25;
if (!(video == 3)) { t3 = des; }
erase des;
if (!(video == 4)) { voltage = oldVol; }
define afterState as TMP24;
afterState = 5;
erase afterState;
goto 3;

label 9;
define next_state as TMP24;
init time = 62500;
init delta = time - timerMSec;
timerMSec = time;
delete time;

if (!upStatus || !downStatus) { standTimer = 750; }
if (delta > standTimer) { standTimer = 0; }
if (delta <= standTimer) { standTimer = standTimer - delta; }

if (!(video == 1) || !enter) { adminTimer = 750; }
if (delta > adminTimer) { adminTimer = 0; }
if (delta <= adminTimer) { adminTimer = adminTimer - delta; }

if (delta > timer) { timer = 0; }
if (delta <= timer) { timer = timer - delta; }

delete delta;
init x = next_state;
erase next_state;
goto x;
delete x;